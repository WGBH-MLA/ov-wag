{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OV-Wag","text":"<p>Wagtail Backend for Open Vault Redesign</p>"},{"location":"#reference","title":"Reference","text":"<p>Further details can be found in the reference section</p>"},{"location":"#other-resources","title":"Other Resources","text":"<p>This is one componenet of the Open Vault redesign. Others are:</p> <ul> <li>ov-frontend Frontend</li> <li>ov-deploy Deployment resources<ul> <li>Documentation</li> </ul> </li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>Created by WGBH-MLA</p>"},{"location":"dev/","title":"Development","text":""},{"location":"dev/#ov","title":"<code>ov</code>","text":"<p>The <code>ov</code> script is the primary Open Vault command line script. This contains a number of pre-built commands to do basic operations.</p>"},{"location":"dev/#usage","title":"Usage","text":"<p><code>ov COMMAND [args]</code></p> ov --help<pre><code>COMMANDS:\n\n  b | build           build the docker images\n  c | cmd             run a compose command\n  cover | coverage    Run the test suite with coverage\n  d | dev             start a development server\n  m | manage          run a wagtail manage.py command\n  s | shell           run a django shell command with the app context\n  t | test            Run the test suite\n  tui                 Run an interactive TUI\n</code></pre>"},{"location":"dev/#commands","title":"Commands","text":""},{"location":"dev/#b-build","title":"<code>b</code> | <code>build</code>","text":"Build the docker images locally. <p>Pass options to docker build</p> <p>Additional docker arguments can be passed to this command.</p> <p>For example, to force a rebuild of the images:</p> <pre><code>ov b --no-cache\n</code></pre>"},{"location":"dev/#c-cmd","title":"<code>c</code> | <code>cmd</code>","text":"Run a <code>docker compose</code> command with the base config files in place."},{"location":"dev/#d-dev","title":"<code>d</code> | <code>dev</code>","text":"Run Development Environment Run the development environment, with <code>docker compose</code>, and follow container logs. <p>Pass options to docker compose</p> <p>Additional compose arguments can be passed. For example, to rebuild the containers before running:</p> <pre><code>ov d --build\n</code></pre>"},{"location":"dev/#m-manage","title":"<code>m</code> | <code>manage</code>","text":"Run a <code>manage.py</code> command in the docker context."},{"location":"dev/#s-shell","title":"<code>s</code> | <code>shell</code>","text":"Enter into a python django shell interpreter, with the application context loaded."},{"location":"dev/#examples","title":"Examples","text":"<p>The following are some useful examples of development commands that might be run:</p>"},{"location":"dev/#migrate-database","title":"Migrate database","text":"<p>Generating the migration files can be accomplished with:</p> <pre><code>ov m makemigrations\n</code></pre> <p>To Run the database migrations:</p> <pre><code>ov m migrate\n</code></pre>"},{"location":"dev/#show-the-logs","title":"Show the logs","text":"<p>Show the docker compose logs <pre><code>ov c logs\n</code></pre></p> <p>Show logs for just the frontend <pre><code>ov c logs ov-frontend\n</code></pre></p>"},{"location":"pdm/","title":"PDM","text":"<p>Package management scripts for ov-wag</p>"},{"location":"pdm/#install-project","title":"Install project","text":"<pre><code>pdm install\n</code></pre>"},{"location":"pdm/#run-scripts","title":"Run scripts","text":"<p>There are several scripts that can be run directly from the command line. They can be run by running:</p> <pre><code>pdm ov\n</code></pre>"},{"location":"pdm/#create-lockfiles","title":"Create lockfiles","text":"<pre><code># dev\npdm lock -G dev,test,cli\n# prod\npdm lock --prod -G production -L pdm-locks/pdm.prod.lock\n# docs\npdm lock --no-default -G docs -L pdm-locks/pdm.doc.lock\n</code></pre>"},{"location":"pdm/#update-lockfiles","title":"Update lockfiles","text":"<pre><code># dev\npdm update -G dev,test,cli --unconstrained --save-compatible\n# prod\npdm update --prod -G production -L pdm-locks/pdm.prod.lock --unconstrained --save-compatible\n# docs\npdm update --no-default -G docs -L pdm-locks/pdm.doc.lock --unconstrained --save-compatible\n</code></pre>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#prerequisites","title":"Prerequisites","text":"<p>This page describes how to run the development environment. You can run the development environment locally, or in a docker container.</p>"},{"location":"setup/#local","title":"Local","text":"<p>This is the recommended way to run the development environment, for ease of use and speed. - <code>python</code> - <code>pip</code> - Running Postgres image</p> <p>Use pip to install PDM, the package manager used for this project.</p> <pre><code>pip install pdm\n</code></pre> <p>Install the dependencies with PDM</p> <pre><code>pdm install\n</code></pre> <p>You can now run the <code>ov</code> command to interact with the development environment.</p> Help! How do I ... ? <p>For a full list of available commands, run  <pre><code>ov -h\n</code></pre></p> <p>For additional information, see the dev#ov section of the development documentation.</p> Activate virtual environment <p>If you are not already in a virtual environment, activate the one created by PDM.</p> <pre><code>$(pdm venv activate)\n</code></pre>"},{"location":"setup/#database","title":"Database","text":"<p>The development environment requires a running Postgres database. The easiest way to run this is with a docker container.</p> <pre><code>docker run --name ov-db -e POSTGRES_PASSWORD=\"YOUR POSTGRES PASSWORD HERE\" -p 5432:5432 -d postgres:alpine\n</code></pre>"},{"location":"setup/#docker","title":"Docker","text":"<p>The development environment can also be run in docker containers, which includes a database configuration. - <code>docker compose</code> installed</p> Requirements <ul> <li>docker</li> <li>docker compose</li> </ul> <p>Running the services outside of docker is possible, but not supported in this context.</p>"},{"location":"setup/#setup_1","title":"Setup","text":""},{"location":"setup/#0-clone-repository","title":"0. Clone repository","text":"Clone repository<pre><code>git clone https://github.com/WGBH-MLA/ov-wag.git\n</code></pre>"},{"location":"setup/#1-create-the-backend-secrets-file","title":"1. Create the backend secrets file","text":"<p>In <code>ov-wag</code>, create a file called <code>.env</code> with the following contents:</p> ov-wag/.env<pre><code>OV_DB_ENGINE=django.db.backends.postgresql\nOV_DB_PORT=5432\nOV_DB_NAME=ov\nOV_DB_USER=postgres\nOV_DB_PASSWORD=\"YOUR POSTGRES PASSWORD HERE\"\n\nOV_BASE_URL=http://localhost:3000\nOV_ADMIN_BASE_URL=http://localhost:8000\n</code></pre>"},{"location":"setup/#2-optional-build-the-backend","title":"2. (Optional) Build the backend","text":"<p>If you have local changes, you can build the backend image locally: Build the backend<pre><code>ov b\n</code></pre></p>"},{"location":"setup/#3-start-the-backend","title":"3. Start the backend","text":"<p>Start the backend<pre><code>ov d\n</code></pre> You can now visit the admin interface at http://localhost:8000/admin</p>"},{"location":"setup/#4-create-a-superuser","title":"4. Create a superuser","text":"Create a superuser<pre><code>ov m createsuperuser\n</code></pre> <p>Follow the prompts to create an admin user.</p>"},{"location":"setup/#5-start-the-frontend","title":"5. Start the frontend","text":"<p>Add frontend setup instructions</p> <p>Make this link work! ov-frontend setup</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#api","title":"API","text":"<p>TODO: Add API docs</p>"}]}