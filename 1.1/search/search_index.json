{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OV-Wag","text":"<p>Wagtail Backend for Open Vault Redesign</p>"},{"location":"#setup","title":"Setup","text":"<p>See the setup guide for instructions on how to set up a local environment or a Docker environment, including installing dependencies and setting up the database.</p>"},{"location":"#development","title":"Development","text":"<p>See the development guide for instructions on how to run the project, including running scripts, running tests, and running migrations.</p>"},{"location":"#reference","title":"Reference","text":"<p>Further details can be found in the reference section</p>"},{"location":"#other-resources","title":"Other Resources","text":"<p>This is one component of the Open Vault redesign. Others are:</p> <ul> <li>Frontend code: github.com/WGBH-MLA/ov-frontend </li> <li>Deployment resources: github.com/WGBH-MLA/ov-deploy </li> <li>Deployment documentation: wgbh-mla.github.io/ov-deploy/</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>Created by WGBH-MLA</p>"},{"location":"dev/","title":"Development","text":"<p>This section describes the development environment and how to use it.</p>"},{"location":"dev/#run-server","title":"Run server","text":"<p>To run the development server, use the following command:</p> <pre><code>./scripts/dev\n</code></pre> <p>This will start a local development server. You can access the Wagtail admin interface at localhost:8000/admin/</p>"},{"location":"dev/#maintenance","title":"Maintenance","text":"<p>See the maintenance guide for instructions on how to maintain the project, including running scripts, tests, and creating lockfiles.</p> <p>For Docker users, see the Docker maintenance guide for instructions on using the <code>ov</code> helper tool for running common commands.</p>"},{"location":"dev/#migrations","title":"Migrations","text":"<p>See the migrations guide for instructions on how to manage database migrations.</p>"},{"location":"dev/#examples","title":"Examples","text":"<p>Some specific example scripts are included, such as the <code>fix_AAPBRecords</code> notebook which can be used to fix AAPB records in the database. This notebook is a Jupyter notebook and can be run with Jupyter Lab or Jupyter Notebook.</p>"},{"location":"dev/docker/","title":"Docker","text":"<p>The <code>ov</code> script is a helper Open Vault command line script for Docker. This contains a number of pre-built commands to do basic operations.</p>"},{"location":"dev/docker/#usage","title":"Usage","text":"<p><code>ov COMMAND [args]</code></p> ov --help<pre><code>COMMANDS:\n\n  b | build           build the docker images\n  c | cmd             run a compose command\n  cover | coverage    Run the test suite with coverage\n  d | dev             start a development server\n  m | manage          run a wagtail manage.py command\n  s | shell           run a django shell command with the app context\n  t | test            Run the test suite\n  tui                 Run an interactive TUI\n</code></pre>"},{"location":"dev/docker/#commands","title":"Commands","text":""},{"location":"dev/docker/#b-build","title":"<code>b</code> | <code>build</code>","text":"Build the docker images locally. <p>Pass options to docker build</p> <p>Additional docker arguments can be passed to this command.</p> <p>For example, to force a rebuild of the images:</p> <pre><code>ov b --no-cache\n</code></pre>"},{"location":"dev/docker/#c-cmd","title":"<code>c</code> | <code>cmd</code>","text":"Run a <code>docker compose</code> command with the base config files in place."},{"location":"dev/docker/#d-dev","title":"<code>d</code> | <code>dev</code>","text":"Run Development Environment Run the development environment, with <code>docker compose</code>, and follow container logs. <p>Pass options to docker compose</p> <p>Additional compose arguments can be passed. For example, to rebuild the containers before running:</p> <pre><code>ov d --build\n</code></pre>"},{"location":"dev/docker/#m-manage","title":"<code>m</code> | <code>manage</code>","text":"Run a <code>manage.py</code> command in the docker context."},{"location":"dev/docker/#s-shell","title":"<code>s</code> | <code>shell</code>","text":"Enter into a python django shell interpreter, with the application context loaded."},{"location":"dev/docker/#t-test","title":"<code>t</code> | <code>test</code>","text":"Run the test suite using <code>pytest</code>."},{"location":"dev/docker/#examples","title":"Examples","text":"<p>Show the docker compose logs <pre><code>ov c logs\n</code></pre></p> <p>Show logs for just the frontend <pre><code>ov c logs ov-frontend\n</code></pre></p> <p>See the maintenance guide for more information on running development commands.</p>"},{"location":"dev/fix_AAPBRecords/","title":"Fix AAPBRecords","text":"In\u00a0[\u00a0]: Copied! <pre>from ov_collections.models import Collection, AAPB_BLOCK_TYPES\n</pre> from ov_collections.models import Collection, AAPB_BLOCK_TYPES  In\u00a0[\u00a0]: Copied! <pre>for collection in Collection.objects.all():\n    for content in collection.content:\n        if content.block_type in AAPB_BLOCK_TYPES:\n            if type(content.value['access_level']) is tuple:\n                print('fixing', collection.title)\n                content.value.update({'access_level': 'online'})\n                collection.save()\n</pre> for collection in Collection.objects.all():     for content in collection.content:         if content.block_type in AAPB_BLOCK_TYPES:             if type(content.value['access_level']) is tuple:                 print('fixing', collection.title)                 content.value.update({'access_level': 'online'})                 collection.save() In\u00a0[\u00a0]: Copied! <pre>from exhibits.models import ExhibitPage\n\nfor page in ExhibitPage.objects.all():\n    for content in page.body:\n        if content.block_type in AAPB_BLOCK_TYPES:\n            if type(content.value['access_level']) is tuple:\n                print('fixing', page.title)\n                content.value.update({'access_level': 'online'})\n                page.save()\n</pre> from exhibits.models import ExhibitPage  for page in ExhibitPage.objects.all():     for content in page.body:         if content.block_type in AAPB_BLOCK_TYPES:             if type(content.value['access_level']) is tuple:                 print('fixing', page.title)                 content.value.update({'access_level': 'online'})                 page.save() In\u00a0[\u00a0]: Copied! <pre>for collection in Collection.objects.all():\n    for content in collection.content:\n        if content.block_type == 'image':\n            print(content.value)\n</pre> for collection in Collection.objects.all():     for content in collection.content:         if content.block_type == 'image':             print(content.value) In\u00a0[\u00a0]: Copied! <pre>from exhibits.models import ExhibitPage\n\nfor page in ExhibitPage.objects.all():\n    for content in page.body:\n        if content.block_type == 'image':\n            print(page.id, content)\n</pre> from exhibits.models import ExhibitPage  for page in ExhibitPage.objects.all():     for content in page.body:         if content.block_type == 'image':             print(page.id, content)"},{"location":"dev/fix_AAPBRecords/#fix-aapbrecords-access_level","title":"Fix AAPBRecords <code>access_level</code>\u00b6","text":"<p>This is a quick data fix for a bad default value when creating the <code>AAPBRecordsBlock</code> property for <code>access_level</code>.</p> <p>This shouldn't have to be run again, but is provided in case it is useful!</p>"},{"location":"dev/fix_AAPBRecords/#why","title":"Why?\u00b6","text":"<p>When creating The <code>access_level</code> value, It was initially set to a tuple, of <code>(value, label)</code>, just like the data in the <code>ChoiceBlock</code>. However, it needed to be just the <code>value</code> only.</p> <p>Migrating the database back and reapplying the migration left the default values in the database, so this manual fix was needed.</p>"},{"location":"dev/fix_AAPBRecords/#usage","title":"Usage\u00b6","text":"<p>Open a python shell in your Wagtail environment:</p> <pre>python manage.py shell\n</pre> <p>Then run the following:</p>"},{"location":"dev/maintenance/","title":"Maintenance","text":"<p>This page describes how to maintain the project. This includes running scripts, creating lockfiles, and running tests.</p>"},{"location":"dev/maintenance/#scripts","title":"Scripts","text":"<p>There are several scripts that can be run directly from the command line. They can be run by running:</p> <pre><code>./scripts/&lt;script_name&gt;\n</code></pre>"},{"location":"dev/maintenance/#common-scripts","title":"Common scripts","text":"<ul> <li><code>./scripts/dev</code> - Starts a local development server on port 8000</li> <li><code>./scripts/docs</code> - Builds and serves the documentation locally</li> <li><code>./scripts/docs-version</code> - Updates the documentation version number to match the app version</li> <li><code>./scripts/makemigrations</code> - Creates new migrations based on the changes made to the models</li> <li><code>./scripts/migrate</code> - Applies the migrations to the database. See the migrations guide for more information.</li> </ul>"},{"location":"dev/maintenance/#management","title":"Management","text":"<p>All Django / Wagtail management commands can be run using the <code>manage.py</code> script:</p> <pre><code>python manage.py &lt;command&gt;\n</code></pre> <p>For a complete list of commands, run:</p> <pre><code>python manage.py\n</code></pre>"},{"location":"dev/maintenance/#tests","title":"Tests","text":"<p>Run the tests:</p> <pre><code>pytest\n</code></pre>"},{"location":"dev/maintenance/#lockfiles","title":"Lockfiles","text":"<p>Update the lockfile:</p> <pre><code>uv lock\n</code></pre>"},{"location":"dev/migrate/","title":"Migrate database","text":"<p>The following commands are used to manage database migrations in the OpenVault project. They can be run from the command line using <code>manage.py</code>.</p> Database migrations <p>Make sure you have the correct environment set up and the database is running before executing these commands.</p>"},{"location":"dev/migrate/#show-all-database-migrations","title":"Show all database migrations","text":"<pre><code>python manage.py showmigrations\n</code></pre>"},{"location":"dev/migrate/#generate-the-migration-files","title":"Generate the migration files","text":"<pre><code>python manage.py makemigrations\n</code></pre>"},{"location":"dev/migrate/#run-the-database-migrations","title":"Run the database migrations","text":"<pre><code>python manage.py migrate\n</code></pre>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#api","title":"API","text":"<p>TODO: Add API docs</p>"},{"location":"setup/","title":"Setup","text":"<p>This section describes how to setup a local development environment. See the Docker setup guide for instructions on how to use a Docker development environment.</p> <p>It is highly recommended to run the development environment locally, for ease of use and speed.</p>"},{"location":"setup/#clone-repository","title":"Clone repository","text":"Clone repository<pre><code>git clone https://github.com/WGBH-MLA/ov-wag.git\n</code></pre> Change directory<pre><code>cd ov-wag\n</code></pre>"},{"location":"setup/#local","title":"Local","text":""},{"location":"setup/#prerequisites","title":"Prerequisites","text":"<p>Use pip to install uv, the package manager used for this project.</p> <pre><code>pip install uv\n</code></pre>"},{"location":"setup/#install","title":"Install","text":"<p>Create a new virtual environment: Create virtual environment<pre><code># Create a new virtual environment\nuv venv\n# Activate the virtual environment\nsource .venv/bin/activate\n</code></pre></p>"},{"location":"setup/#install-dependencies","title":"Install dependencies","text":"<p>Install the dependencies:</p> <pre><code>uv sync\n</code></pre> <p>You can now run project commands like <code>python manage.py &lt;command&gt;</code> or the shortcuts in the <code>./scripts/</code> directory.</p> <p>See the maintenance section for examples of running tests, building documentation, and more.</p>"},{"location":"setup/#database","title":"Database","text":"<p>The development environment requires a running Postgres database. The easiest way to run this is with a docker container.</p> <pre><code>docker run --name ov-db -e POSTGRES_PASSWORD=\"YOUR POSTGRES PASSWORD HERE\" -p 5432:5432 -d postgres:alpine\n</code></pre>"},{"location":"setup/#next-steps","title":"Next steps","text":"<p>See the development documentation for more information on how to run the project, including running tests, building documentation, and more.</p>"},{"location":"setup/docker/","title":"Docker","text":""},{"location":"setup/docker/#docker","title":"Docker","text":"<p>If local installation is not an option, a docker compose environment is provided, but we recommend using the local installation for development if possible.</p>"},{"location":"setup/docker/#ov-cli","title":"<code>ov</code> CLI","text":"<p>A helper CLI is provided to make it easier to run the development environment. It is called <code>ov</code>, and can be used to run commands in the docker container.</p> <pre><code>ov &lt;command&gt;\n</code></pre> <p>Use <code>ov -h</code> to see the available commands and usage.</p> Requirements <ul> <li>docker</li> <li>docker compose</li> </ul>"},{"location":"setup/docker/#1-create-the-backend-secrets-file","title":"1. Create the backend secrets file","text":"<p>In the root directory, create a file called <code>.env</code> with the following contents:</p> ov-wag/.env<pre><code>OV_DB_ENGINE=django.db.backends.postgresql\nOV_DB_PORT=5432\nOV_DB_NAME=ov\nOV_DB_USER=postgres\nOV_DB_PASSWORD=\"YOUR POSTGRES PASSWORD HERE\"\n\nOV_BASE_URL=http://localhost:3000\nOV_ADMIN_BASE_URL=http://localhost:8000\n</code></pre>"},{"location":"setup/docker/#2-optional-build-the-backend","title":"2. (Optional) Build the backend","text":"<p>If you have local changes, you can build the backend image locally: Build the backend<pre><code>ov b\n</code></pre></p>"},{"location":"setup/docker/#3-start-the-backend","title":"3. Start the backend","text":"<p>Start the backend<pre><code>ov d\n</code></pre> You can now visit the admin interface at http://localhost:8000/admin</p>"},{"location":"setup/docker/#4-create-a-superuser","title":"4. Create a superuser","text":"Create a superuser<pre><code>ov m createsuperuser\n</code></pre> <p>Follow the prompts to create an admin user.</p>"},{"location":"setup/docker/#next-steps","title":"Next steps","text":"<p>See the development documentation for more information on how to run the project, including running tests, building documentation, and more.</p>"}]}